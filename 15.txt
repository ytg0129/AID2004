前情回顾

1. 线程

   什么是线程 ： 多任务编程方法
               运行过程 --》占有运行资源 -》线程共享进程资源
               轻量级进程 --》 一个进程包含多个线程

2. 创建线程  threading
   Thread()  start()  join()

   线程属性  自定义线程类

3. 同步互斥

   Event()   e.set() e.wait() e.clear()
   Lock()    lock.acquire()  lock.release()

   好处：可以控制多个线程对共享资源的操作顺序
   坏处：可能降低程序执行效率，会产生死锁

4. GIL 全局解释器锁

   后果： Python线程效率低
   使用情况 ： 包含多阻塞，高延迟的程序中可以使用


文件服务器

需求：

【1】 分为服务端和客户端，要求可以有多个客户端同时操作。
【2】 客户端可以查看服务器文件库中有什么文件。
【3】 客户端可以从文件库中下载文件到本地。
【4】 客户端可以上传一个本地文件到文件库。
【5】 使用print在客户端打印命令输入提示，引导操作

技术点：
   网络传输 ： tcp
   服务端并发模型： 多线程 ，多进程

功能模块和封装设计：

   函数和类

   搭建框架模型 （函数）

   查看文件库文件 （封装在类中--》 实现的文件服务的具体功能）
   下载文件
   上传文件


通信协议：
    请求类型    数据参量
    LIST
    GET       filename
    PUT       filename
    EXIT


模块具体逻辑设计：

   搭建框架模型
      服务端：多线程网络并发模型 （总分模型--》handle）

      客户端：连接服务端
            打印提示信息
            给服务端发送请求

   查看文件库文件
      客户端 ： 输入命令 list
              给服务端发送请求
              等待回复
              No ： 结束
              Yes： 接收文件列表

      服务端 ： 接收客户端请求
              判断能否满足请求
              给出回复
              No ： 结束
              Yes : 发送文件列表


   下载文件 (文件不存在则不能下载)
          客户端 ： 发送请求
                  等待回复
                  OK 接收文件
                  FAIL 结束

          服务端 ： 接收请求
                   判断文件是否存在  告知客户端
                   ok --> 发送文件
                   Fail --》 结束



   上传文件 （文件存在则不能上传）

   退出


cookies：

  请求应答机制 ： 并不是客户端所有请求服务端都能以相同的方式处理

       客户端发起请求
       服务端判断能够满足客户端请求，根据情况回复给客户端
       客户端根据服务端回复，做出相应的后续动作









